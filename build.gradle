import dev.ithundxr.silk.ChangelogText

plugins {
    id "idea"
    id "eclipse"
    id "maven-publish"
    id "net.neoforged.moddev.legacyforge" version "2.0.74"
    id "me.modmuss50.mod-publish-plugin" version "0.8.3"
    id "dev.ithundxr.silk" version "0.11.15"
    id "net.kyori.blossom" version "2.1.0" // https://github.com/KyoriPowered/blossom
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.8" // https://github.com/JetBrains/gradle-idea-ext-plugin
}

apply from: "./gradle/java.gradle"
apply from: "gradle/property_loader.gradle"

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE').equals('false')
ext.buildNumber = System.getenv('BUILD_NUMBER')
String gitHash = "\"${calculateGitHash() + (hasUnstaged() ? "-modified" : "")}\""

base {
    archivesName = "create-${artifact_minecraft_version}"
    group = 'com.simibubi.create'
    version = mod_version + (dev && buildNumber != null ? "-${buildNumber}" : '')
}

boolean inMultiModWorkspace = rootProject.hasProperty('multiModWorkspace.enabled')
boolean ponderInWorkspace = rootProject.hasProperty('multiModWorkspace.ponder')

if (ponderInWorkspace) {
    evaluationDependsOn(":ponder:Forge")
}

project.logger.lifecycle("MultiModWorkspace ${inMultiModWorkspace ? 'enabled' : 'disabled'} for project ${project.name}.")
project.logger.lifecycle("Dependencies included in Workspace: [Ponder: ${ponderInWorkspace}]")

mixin {
    add sourceSets.main, 'create.refmap.json'
    config 'create.mixins.json'
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

legacyForge {
    version = "$minecraft_version-$forge_version"

    // TODO - Try turning this on later
    validateAccessTransformers = false

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformers.from "src/main/resources/META-INF/accesstransformer.cfg"
    }

    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }

    mods {
        create {
            sourceSet sourceSets.main
        }

        if (ponderInWorkspace) {
            ponder {
                sourceSet project(":ponder:Common").sourceSets.main
                sourceSet project(":ponder:Forge").sourceSets.main
            }
        }
    }

    runs {
        // applies to all the run configs below
        configureEach {
            systemProperty 'forge.logging.markers', ''
            systemProperty 'forge.logging.console.level', 'info'
            jvmArguments = ["-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition"]
            //jvmArgs("-XX:-OmitStackTraceInFastThrow") // uncomment when you get exceptions with null messages etc
            //jvmArgs '-XX:+UnlockCommercialFeatures' // uncomment for profiling

            systemProperty 'mixin.debug.export', 'true'
            systemProperty 'mixin.debug.verbose', 'true'

            programArgument '-mixin.config=create.mixins.json'
            programArgument '-mixin.config=ponder.mixins.json'
        }

        client {
            client()

            gameDirectory = project.file('run')
        }

        server {
            server()

            gameDirectory = project.file('run/server')
        }

        data {
            data()

            gameDirectory = project.file('run')
            systemProperty 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            systemProperty 'forge.logging.console.level', 'debug'
            programArguments.addAll("--mod", mod_id as String, "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources").getAbsolutePath())
        }

        gameTestServer {
            type = "gameTestServer"

            gameDirectory = project.file('run/gametest')
            // setForceExit false <- FIXME 1.20
        }
    }
}

repositories {
    maven { url = "https://maven.createmod.net" } // Ponder, Flywheel
    maven { url = "https://maven.tterrag.com" } // Registrate
    maven { url = "https://maven.blamejared.com" } // JEI, Vazkii's Mods
    maven { url = "https://harleyoconnor.com/maven" } // Dynamic Trees
    maven { url = "https://maven.theillusivec4.top/" } // Curios API
    maven { url = "https://maven.squiddev.cc" } // CC: Tweaked
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://maven.saps.dev/releases" } // FTB Mods
    maven { url = "https://maven.architectury.dev" } // Arch API
    maven {
        url = "https://jm.gserv.me/repository/maven-public" // JourneyMap
        content {
            includeGroup "info.journeymap"
            includeGroup "mysticdrew"
        }
    }

    mavenCentral()
    mavenLocal()
    flatDir {
        dirs "libs"
    }
}

dependencies {
    jarJar("com.tterrag.registrate:Registrate:${registrate_version}") {
        version {
            strictly "[MC1.20-1.3.3,)"
        }
    }
    jarJar("dev.engine-room.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}") {
        version {
            strictly "[1.0,2.0)"
        }
    }

    jarJar("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}") {
        version {
            strictly "[${ponder_version},)"
        }
    }

    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")) {
        version {
            strictly "[${mixin_extras_version},)"
        }
    }

    modImplementation("com.tterrag.registrate:Registrate:${registrate_version}")

    modCompileOnly("dev.engine-room.flywheel:flywheel-forge-api-${flywheel_minecraft_version}:${flywheel_version}")
    modRuntimeOnly("dev.engine-room.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    modRuntimeOnly("dev.engine-room.vanillin:vanillin-forge-${flywheel_minecraft_version}:${flywheel_version}")

    if (ponderInWorkspace) {
        implementation project(":ponder:Common")
        implementation project(":ponder:Forge")
    } else {
        modImplementation("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")
    }

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))

    // modCompileOnly("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    // modCompileOnly("mezz.jei:jei-${jei_minecraft_version}-forge-api:${jei_version}")
    modImplementation("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")

    modCompileOnly("top.theillusivec4.curios:curios-forge:${curios_version}+${curios_minecraft_version}:api")
    modRuntimeOnly("top.theillusivec4.curios:curios-forge:${curios_version}+${curios_minecraft_version}")

    if (cc_tweaked_enable.toBoolean()) {
        compileOnly("cc.tweaked:cc-tweaked-${cc_tweaked_minecraft_version}-core-api:${cc_tweaked_version}")
        modCompileOnly("cc.tweaked:cc-tweaked-${cc_tweaked_minecraft_version}-forge-api:${cc_tweaked_version}")
        modRuntimeOnly("cc.tweaked:cc-tweaked-${cc_tweaked_minecraft_version}-forge:${cc_tweaked_version}")
    }

    if (dynamic_trees_enable.toBoolean()) {
        modCompileOnly("com.ferreusveritas.dynamictrees:DynamicTrees-${dynamic_trees_minecraft_version}:${dynamic_trees_version}")
    }

    // modImplementation("curse.maven:ic2-classic-242942:5555152")
    // modImplementation("curse.maven:druidcraft-340991:3101903")
    // modImplementation("com.railwayteam.railways:railways-1.19.2-1.6.4:all") { transitive = false }

    modRuntimeOnly("dev.architectury:architectury-forge:9.1.12")
    modImplementation("dev.ftb.mods:ftb-chunks-forge:2001.3.1")
    modImplementation("dev.ftb.mods:ftb-teams-forge:2001.3.0")
    modImplementation("dev.ftb.mods:ftb-library-forge:2001.2.4")

    implementation fg.deobf("curse.maven:journeymap-32274:5457831")
    // implementation fg.deobf("ignored:journeymap-1.20.1-5.10.1-forge")

    // runtimeOnly fg.deobf("curse.maven:framedblocks-441647:5629578")
    // runtimeOnly fg.deobf("curse.maven:galosphere-631098:4983871")
    // runtimeOnly fg.deobf("curse.maven:elementary-ores-332609:4622524")
    // runtimeOnly fg.deobf("curse.maven:flib-661261:5495793")
    // runtimeOnly fg.deobf("curse.maven:infernal-expansion-395078:4002091") not updated to 1.20
    // runtimeOnly fg.deobf("org.violetmoon.zeta:Zeta:1.0-9.44")
    // runtimeOnly fg.deobf("org.violetmoon.quark:Quark:4.0-461.3475")
    // runtimeOnly fg.deobf("curse.maven:mantle-74924:5339977") not updated to 1.20
    // runtimeOnly fg.deobf("curse.maven:tinkers-construct-74072:5358052") not updated to 1.20
    // runtimeOnly fg.deobf("maven.modrinth:rubidium:0.7.1")
    // runtimeOnly fg.deobf("maven.modrinth:embeddium:0.3.31+mc1.20.1")
    // runtimeOnly fg.deobf("maven.modrinth:aether:1.20.1-1.4.2-neoforge")
    // runtimeOnly fg.deobf("maven.modrinth:spark:1.10.53-forge")
    // runtimeOnly fg.deobf("curse.maven:forbidden-arcanus-309858:5198323")
    // runtimeOnly fg.deobf("curse.maven:valhelsia-core-416935:5189548")
    // runtimeOnly fg.deobf("curse.maven:modern-ui-352491:5229575")
    // runtimeOnly fg.deobf("curse.maven:sophisticated-storage-619320:5654289")
    // runtimeOnly fg.deobf("curse.maven:sophisticated-core-618298:5654284")
    // runtimeOnly fg.deobf("curse.maven:functional-storage-556861:5650296")
    // runtimeOnly fg.deobf("curse.maven:titanium-287342:5468426")
    // runtimeOnly fg.deobf("curse.maven:storage-drawers-223852:5687960")
    // runtimeOnly fg.deobf("curse.maven:architectury-api-419699:5137938")
    // runtimeOnly fg.deobf("curse.maven:ftb-library-forge-404465:5567591")
    // runtimeOnly fg.deobf("curse.maven:ftb-chunks-forge-314906:5378090")
    // runtimeOnly fg.deobf("curse.maven:ftb-teams-forge-404468:5267190")
    // runtimeOnly fg.deobf("curse.maven:citadel-331936:5633260")
    // runtimeOnly fg.deobf("curse.maven:ice-and-fire-dragons-264231:5633453")
    // runtimeOnly fg.deobf("curse.maven:exnihilosequentia-400012:4819325")
    // runtimeOnly fg.deobf("curse.maven:novacore-923669:4815411")
    // runtimeOnly fg.deobf("curse.maven:upgrade-aquatic-326895:5615651")
    // runtimeOnly fg.deobf("curse.maven:blueprint-382216:5292242")
    // runtimeOnly fg.deobf("curse.maven:windsweptmod-636321:4817132") not updated to 1.20
    // runtimeOnly fg.deobf("curse.maven:good-ending-690161:5024405")
    // runtimeOnly fg.deobf("curse.maven:terrablender-563928:5378180")
    // runtimeOnly fg.deobf("curse.maven:regions-unexplored-659110:5558225")
    // runtimeOnly fg.deobf("curse.maven:vampirism-become-a-vampire-233029:5526512")
    // runtimeOnly fg.deobf("curse.maven:applied-energistics-2-223794:5641282")
    // runtimeOnly fg.deobf("curse.maven:silent-lib-242998:4585754")
    // runtimeOnly fg.deobf("curse.maven:silents-gems-220311:5193708")
    // runtimeOnly fg.deobf("curse.maven:project-vibrant-journeys-300297:5676296")

    // https://discord.com/channels/313125603924639766/725850371834118214/910619168821354497
    // Prevent Mixin annotation processor from getting into IntelliJ's annotation processor settings
    // This allows 'Settings > Build, Execution, and Deployment > Build Tools > Gradle > Build and run using' set to IntelliJ to work correctly
    if (!Boolean.getBoolean('idea.sync.active')) {
        annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    }
}

sourceSets.main {
    java {
        if (!cc_tweaked_enable.toBoolean()) {
            exclude 'com/simibubi/create/compat/computercraft/implementation/**'
        }
    }

    resources {
        srcDir 'src/generated/resources'
        exclude '.cache/'
    }

    blossom.javaSources {
        property("version", build_info_mod_version)
        property("gitCommit", gitHash.toString())
    }
}

processResources {
    def buildProps = project.properties.clone()

    // Replaces FML's magic file.jarVersion string with the correct version at build time.
    buildProps.put('file', [jarVersion: project.version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand buildProps
    }
}

compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}

jar {
    from('LICENSE') {
        rename { "${it}_${archivesBaseName}" }
    }

    manifest.attributes([
        "MixinConfigs": "create.mixins.json",
        "Git-Hash"    : gitHash
    ])
}

tasks.named("sourcesJar") {
    manifest.attributes([
        "Git-Hash": gitHash
    ])
}

project.publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }

    repositories {
        if (project.hasProperty("mavenUsername") && project.hasProperty("mavenPassword") && project.hasProperty("mavenURL")) {
            project.logger.lifecycle("Adding maven from secrets")

            maven {
                credentials {
                    username = project.property("mavenUsername") as String
                    password = project.property("mavenPassword") as String
                }
                url = URI.create(project.property("mavenURL") as String)
            }
        }

        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        }
    }
}

publishMods {
    file = jar.archiveFile
    changelog = ChangelogText.getChangelogText(project).toString()
    type = STABLE
    displayName = "$mod_name $minecraft_version $mod_version"
    modLoaders.add("forge")
    modLoaders.add("neoforge")

//    curseforge {
//        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
//        projectId = "328085"
//        minecraftVersions.add(minecraft_version)
//    }

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "LNytGWDc"
        minecraftVersions.add(minecraft_version)
    }
}

String calculateGitHash() {
    try {
        def output = providers.exec {
            commandLine("git", "rev-parse", "HEAD")
        }
        return output.standardOutput.asText.get().trim()
    } catch (Throwable ignored) {
        return "unknown"
    }
}

boolean hasUnstaged() {
    try {
        def output = providers.exec {
            commandLine("git", "status", "--porcelain")
        }
        String result = output.standardOutput.asText.get().replace("/M gradlew(\\.bat)?/", "").trim()
        if (!result.isEmpty())
            println("Found stageable results:\n ${result}\n")
        return !result.isEmpty()
    } catch (Throwable ignored) {
        return false
    }
}
